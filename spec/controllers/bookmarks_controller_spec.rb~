require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BookmarksController do
  render_views
  # This should return the minimal set of attributes required to create a valid
  # Bookmark. As you add validations to Bookmark, be sure to
  # update the return value of this method accordingly.
  
 # describe "GET 'index'" do
#    @bookmarks = Bookmark.all
#    it "should be successful" do
#      get 'index'
#      response.should be_success
#      
#      if @bookmarks.nil? == true
#			puts "No bookmarks present"
#      end
#    end
#
#  end

  describe "GET 'new'" do
    it "should be successful" do
      get 'new'
      response.should be_success
    end
    
    it "renders a submit button" do
      get 'new'
      response.should have_selector("input", :type => "submit")
    end
  end
  
  describe "access control" do

    it "should deny access to 'create'" do
      post :create
      response.should redirect_to(signin_path)
    end

   it "should deny access to 'destroy'" do
     delete :destroy, :id => 1
      response.should redirect_to(signin_path)
    end
  end
  
  describe "POST 'create'" do

    before(:each) do
      @user = test_sign_in(Factory(:user))
    end

    describe "failure" do

      before(:each) do
        @attr = { :URL => "" }
      end

      it "should not create a bookmark" do
        lambda do
          post :create, :bookmark => @attr
        end.should_not change(Bookmark, :count)
      end

      it "should render the home page" do
        post :create, :micropost => @attr
        response.should redirect_to root_path
      end
    end

    describe "success" do

      before(:each) do
        @attr = { :URL => "www.example.com" }
      end

      it "should create a bookmark" do
        lambda do
          post :create, :bookmark => @attr
        end.should change(Bookmark, :count).by(1)
      end

      it "should redirect to the home page" do
        post :create, :bookmark => @attr
        response.should redirect_to(root_path)
      end

      it "should have a flash message" do
        post :create, :bookmark => @attr
        flash[:success].should =~ /bookmark created/i
      end
    end
  end
  
  describe "DELETE 'destroy'" do

    describe "for an unauthorized user" do

      before(:each) do
        @user = Factory(:user)
        wrong_user = Factory(:user, :email => Factory.next(:email))
        test_sign_in(wrong_user)
        @bookmark = Factory(:bookmark, :user => @user)
      end

      it "should deny access" do
        delete :destroy, :id => @bookmark
        response.should redirect_to(root_path)
      end
    end

    describe "for an authorized user" do

      before(:each) do
        @user = test_sign_in(Factory(:user))
        @bookmark = Factory(:bookmark, :user => @user)
      end

      it "should destroy the bookmark" do
        lambda do 
          delete :destroy, :id => @bookmark
        end.should change(Bookmark, :count).by(-1)
      end
    end
  end
end

